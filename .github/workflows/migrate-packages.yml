# The workflow migrates Maven packages between two GitHub Organizations
# This workflow will be trigged by a label added to an issue named 'start-migration'

name: Migrate Maven Packages
on:
    issues:
        types: [labeled]

jobs:
    migrate-packages:
        if: github.event.label.name == 'start-migration'
        runs-on: ubuntu-latest
        outputs:
          cache-key: ${{ steps.extract-params.outputs.cache-key }}
          to-org: ${{ steps.extract-params.outputs.to-org }}
          from-org: ${{ steps.extract-params.outputs.from-org }}
          package-list: ${{ steps.filter-packages.outputs.filtered-packages }}

        steps:        
          - name: Extract parameters from issue body
            id: extract-params
            run: |
                FROM_ORG=$(echo '${{ github.event.issue.body }}' | awk '/### Source Organization Name/{getline; getline; print; exit}')
                TO_ORG=$(echo '${{ github.event.issue.body }}' | awk '/### Destination Organization Name/{getline; getline; print; exit}')
                PACKAGE_LIST=$(echo '${{ github.event.issue.body }}' | awk '/<!-- package-list="/{print; exit}' | sed 's/<!-- //;s/ -->//')
                CACHE_KEY=$(echo '${{ github.event.issue.body }}' | awk '/<!-- cache-key="/{print; exit}' | sed 's/<!-- //;s/ -->//' | tr -d '"')
                TASKS=$(echo '${{ github.event.issue.body }}' | awk '/### Package List/,/> **Note**/' | grep '\[x\]' | sed -n 's/.*\] \(.*\) (\(.*\))/\1/p' | jq -R -s -c 'split("\n")[:-1]')
                echo "from-org=$FROM_ORG" >> "$GITHUB_OUTPUT"
                echo "to-org=$TO_ORG" >> "$GITHUB_OUTPUT"
                echo "$CACHE_KEY" >> "$GITHUB_OUTPUT"
                echo "selected-tasks=$TASKS" >> "$GITHUB_OUTPUT"
                echo "$PACKAGE_LIST" >> "$GITHUB_OUTPUT"
                echo "from-org=$FROM_ORG" >> "$GITHUB_STEP_SUMMARY"
                echo "to-org=$TO_ORG" >> "$GITHUB_STEP_SUMMARY"
                echo "$CACHE_KEY" >> "$GITHUB_STEP_SUMMARY"
                echo "selected-tasks=$TASKS" >> "$GITHUB_STEP_SUMMARY"
                echo "$PACKAGE_LIST" >> "$GITHUB_STEP_SUMMARY"
            shell: bash

          - name: Filter package list
            id: filter-packages
            run: |
              FILTERED_PACKAGES=$(echo '${{ fromJson(steps.extract-params.outputs.package-list) }}' | jq -c --argjson tasks '${{ steps.extract-params.outputs.selected-tasks }}' '[.[] | select(.name as $name | $tasks | index($name))]')
              echo "filtered-packages=$FILTERED_PACKAGES" >> "$GITHUB_OUTPUT"
              echo "filtered-packages=$FILTERED_PACKAGES" >> "$GITHUB_STEP_SUMMARY"
            shell: bash
  
    upload-assets:
      needs: migrate-packages
      runs-on: ubuntu-latest

      strategy:
        max-parallel: 1
        matrix:
          pkg: ${{fromJson(needs.migrate-packages.outputs.package-list)}}

      outputs:
        job-id: 

      steps:
        - name: Set job id
          id: set-job-id
          run: |
            echo "job-id=${{ github.job }}" >> "$GITHUB_OUTPUT"
            echo "job-id=${{ github.job }}" >> "$GITHUB_STEP_SUMMARY"

        - name: Check out code
          uses: actions/checkout@v4

        # retrieve cache
        - name: Restore JSON files from cache
          uses: actions/cache@v4.0.1
          with:
            key: |
              ${{ needs.migrate-packages.outputs.cache-key }}
            path: |
              *.json
            fail-on-cache-miss: true
              
        # - name: Read package ${{ matrix.pkg.name }} 
        #   run: |
        #     echo "Ready to migrate: ${{ matrix.pkg.toOwnerRepoExists }}"
        #     echo "Reading from file ${{ matrix.pkg.file }}"
        #     cat ${{ matrix.pkg.file }}

        - name: Upload ${{ matrix.pkg.name }} to ${{ needs.migrate-packages.outputs.to-org }}
          uses: ./.github/actions/upload-maven-package-from-json
          with:
            package-import-json-file: ${{ matrix.pkg.file }}
            from-org-pat: ${{ secrets.FROM_ORG_PAT }}
            to-org: ${{ needs.migrate-packages.outputs.to-org }}
            to-org-pat: ${{ secrets.TO_ORG_PAT }}

    report-status:
      if: always()
      needs: upload-assets
      runs-on: ubuntu-latest
      steps:
        - name: Report status
          run: |
            echo "Job id of previous job: ${{ needs.upload-assets.outputs.job-id }}"
          shell: bash